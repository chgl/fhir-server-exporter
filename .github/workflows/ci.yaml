name: ci

on:
  push:
    branches: [master]
  release:
    types: [created]
  pull_request:
    branches: [master]

jobs:
  build:
    name: build
    runs-on: ubuntu-22.04
    outputs:
      image-tags: ${{ steps.container_meta.outputs.tags }}
    permissions:
      packages: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8 # tag=v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # tag=v2

      - name: Docker meta
        id: container_meta
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea # tag=v4
        with:
          images: |
            docker.io/${{ github.repository }}
            quay.io/${{ github.repository }}
            ghcr.io/${{ github.repository }}

      - name: Login to DockerHub
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # tag=v2
        if: github.event_name != 'pull_request'
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Quay.io Container Registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # tag=v2
        if: github.event_name != 'pull_request'
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_IO_USERNAME }}
          password: ${{ secrets.QUAY_IO_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # tag=v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit tests
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5 # tag=v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false
          target: test

      - name: Build and push
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5 # tag=v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.container_meta.outputs.tags }}
          labels: ${{ steps.container_meta.outputs.labels }}
          load: ${{ github.event_name == 'pull_request' }}
          # platforms: linux/amd64,linux/arm64,linux/arm/v8

      - name: Install .NET
        uses: actions/setup-dotnet@a351d9ea84bc76ec7508debf02a39d88f8b6c0c0 # tag=v2
        with:
          dotnet-version: "7.0.x"
          include-prerelease: true

      - name: Run E2E tests with newly built container image
        env:
          FHIR_SERVER_EXPORTER_E2E_TEST_IMAGE: "${{ fromJson(steps.container_meta.outputs.json).tags[0] }}"
        run: |
          dotnet restore src/FhirServerExporter.Tests.E2E/
          dotnet test src/FhirServerExporter.Tests.E2E/

  release:
    needs: build
    name: release
    runs-on: ubuntu-22.04
    if: ${{ github.event_name != 'pull_request' }}
    permissions:
      pull-requests: write
      contents: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3
        with:
          fetch-depth: 0

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@3b88c82b34098e8b51e401c1082c9170b0a3ec3c # tag=v3
        with:
          extra_plugins: |
            conventional-changelog-conventionalcommits@5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

  sign-images:
    name: sign images
    runs-on: ubuntu-22.04
    if: ${{ github.event_name != 'pull_request' }}
    needs:
      - build
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # tag=v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # tag=v2
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 # tag=v2.6.0

      - name: Sign image
        env:
          COSIGN_EXPERIMENTAL: "true"
          IMAGES: ${{ needs.build.outputs.image-tags }}
        run: |
          while read -r image; do
            if [[ $image = quay.io/* ]]; then
              echo "Skipping '$image' hosted on quay.io"
              continue
            fi
            echo "Signing '$image' using keyless approach"
            cosign sign "$image"
          done <<< "$IMAGES"
