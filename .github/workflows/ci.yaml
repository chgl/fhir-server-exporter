name: ci

on:
  push:
    branches: [master]
    tags:
      - "v*"
  pull_request:
    branches: [master]

jobs:
  lint:
    name: Lint Code Base
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0
      - uses: actions/setup-python@v3
      - name: Run pre-commit
        uses: pre-commit/action@v2.0.3
      - name: Lint code base
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KUBERNETES_KUBEVAL_OPTIONS: "--ignore-missing-schemas"
  build:
    name: Build
    runs-on: ubuntu-20.04
    needs: lint
    permissions:
      id-token: write
      security-events: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "template"
          template: "@/contrib/sarif.tpl"
          output: "trivy-results.sarif"
          severity: "CRITICAL"
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: "trivy-results.sarif"
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: |
            docker.io/chgl/fhir-server-exporter
            quay.io/chgl/fhir-server-exporter
            ghcr.io/chgl/fhir-server-exporter
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to Quay.io Container Registry
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_IO_USERNAME }}
          password: ${{ secrets.QUAY_IO_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Run unit tests
        id: docker_build_unit_test
        uses: docker/build-push-action@v2
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: false
          target: test
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Get platforms to build
        id: platforms
        run: |
          if [ "$IS_PULL_REQUEST" == "true" ]; then
            echo "::set-output name=platforms::linux/amd64"
          else
            echo "::set-output name=platforms::linux/amd64,linux/arm64,linux/arm/v7"
          fi
        env:
          IS_PULL_REQUEST: ${{ github.event_name == 'pull_request' }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          load: ${{ github.event_name == 'pull_request' }}
          platforms: ${{ steps.platforms.outputs.platforms }}
      - name: List images
        id: list_images
        run: |
          docker image ls
          IMAGES=(${{ steps.docker_meta.outputs.tags }})
          echo "##[set-output name=image_name;]${IMAGES[0]}"
      - name: Create k8s KinD Cluster
        uses: helm/kind-action@v1.2.0
      - name: Load image into KinD
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          kind load docker-image ${{ steps.list_images.outputs.image_name }} --name=chart-testing
      - uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "4.0.5"
      - name: Deploy image
        run: |
          kustomize edit set image fhir-server-exporter="${{ steps.list_images.outputs.image_name }}"
          kustomize build
          kustomize build | kubectl apply -f -
          kubectl get pods -A -o wide
          kubectl describe pod/fhir-server-exporter
      - name: Run fhir-server-exporter test job
        run: |
          kubectl apply -f hack/k8s/test-job.yaml
          kubectl get pods -A -o wide
          kubectl wait --for=condition=Ready --timeout=5m pod/fhir-server-exporter
          kubectl wait --for=condition=Complete --timeout=5m job/test-fhir-server-exporter
      - name: Install Cosign
        if: ${{ github.event_name != 'pull_request' }}
        uses: sigstore/cosign-installer@v2.1.0
      - name: Sign images
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
          IMAGES: ${{ steps.docker_meta.outputs.tags }}
        run: |
          while read -r image; do
            if [[ $image = quay.io/* ]]; then
              echo "Skipping '$image' hosted on quay.io"
              continue
            fi
            echo "Signing '$image' using keyless approach"
            cosign sign "$image"
          done <<< "$IMAGES"
  release:
    needs: build
    name: Release
    runs-on: ubuntu-20.04
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        with:
          extra_plugins: |
            conventional-changelog-conventionalcommits@4.6.3
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
